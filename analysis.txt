//Fausto Tommasi
1. My implementation follows the algorithm described by the book by refactoring into functions to avoid redundancy. The vector data, is sorted by x and y and then passed onto a function 'proc' that handles the recursive procedure. If the size of the data is less than or equal to three, then the brute force method is called. Otherwise, the vector that is sorted by x is split up and sorted recursively. Once the smallest distance between two points in each half is found, then the middle 'strip' Ystrip is looked at. This is done by analyzing all points whose x distance squared is less than or equal to the current best sorted by Y coordinate this time. Once this strip is found, it is searched in blocks of size 7 (i.e. for every point, the next seven points are looked at) in order to find a smaller distance. The best Outcome 'delta' that has been found is returned.

2. xSorted is a vector that contains the data sorted by X. This vector is split into two vectors leftHalf and rightHalf which are passed down recursively, each representing the left and right halves of the original vector. ySorted is a vector that contains the same points sorted by Y. This vector is split into Yleft and Yright. These vectors are still sorted by y, but split into the points which are to the left and right of the midpoint. These vectors are passed down recursively. midPoint is the middle point according to x and delta is the current best outcome, as described in the book.

3.The value chosen as the threashold for the brute force is 3. The ideal value according to data gathering (as shown below ) is somewhere less, but close to 1000 . The value of 3 was chosen because of the book's description of the algorithm

4.
N       brute-force       divide-and-conquer
1,000    1.32143 ms       0.807703 ms
2,000    5.26757 ms       1.84119 ms
4,000    21.0404 ms       3.5361 ms
8,000    84.0212 ms       7.54095 ms
16,000   336.286 ms       15.6802 ms
32,000   1348.85 ms       32.7343 ms
64,000   5373.95 ms       70.1899 ms
128,000  21493.9 ms       148.504 ms
256,000  86027.2 ms       308.859 ms
512,000    -              635.006 ms
1,000,000   -             1244.96 ms
2,000,000    -            3275.29 ms
4,000,000    -            5293.81 ms
8,000,000    -            11177.3 ms
16,000,000    -           23323.5 ms
32,000,000     -          48718.6 ms

5. The brute force approach grows a lot faster in run time as the data set grows. The time closely follows O(n^2). The divide and conquer approach goes up almost linearly. That is, when the data set doubles in size, the run time increases by a little more than double. This behavior agrees with a O(n logn) 

